[[plugins]]
repo = 'Shougo/ddc.vim'
on_event = ['InsertEnter', 'CursorHold']
depends = ['denops.vim', 'pum.vim']
hook_source = '''
" call ddc#custom#patch_global('ui', 'native')
call ddc#custom#patch_global('sources', ['vim-lsp', 'around', 'buffer'])
call ddc#custom#patch_global('cmdlineSources', {
     \   ':': ['cmdline', 'around'],
     \ })
call ddc#custom#patch_global('sourceOptions', {
     \ '_': {
     \   'ignoreCase': v:true,
     \   'matchers': ['matcher_fuzzy'],
     \   'sorters': ['sorter_fuzzy'],
     \   'converters': ['converter_fuzzy'],
     \ },
     \ 'around': {'mark': '[A]'},
     \ 'buffer' : {'mark': '[B]'},
     \ 'vim-lsp': {
     \   'mark': '[LSP]',
     \   'dup': 'force',
     \ },
     \ 'cmdline': {'mark': '[CMD]'},
     \ })

call ddc#custom#patch_global('sourceParams', {
     \ 'around': {'maxSize': 500},
     \ 'buffer': {
     \   'requiresSameFiletype': v:false,
     \   'limitBytes': 5000000,
     \   'fromAltBuf': v:true,
     \   'forceCollect': v:true,
     \ },
     \ })

" Use pum.vim
call ddc#custom#patch_global('autoCompleteEvents', [
      \ 'InsertEnter', 'TextChangedI', 'TextChangedP',
      \ 'CmdlineEnter', 'CmdlineChanged', 'TextChangedT',
      \ ])
call ddc#custom#patch_global('ui', 'pum')

" For insert mode completion
inoremap <expr> <TAB>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ (col('.') <= 1 <Bar><Bar> getline('.')[col('.') - 2] =~# '\s') ?
      \ '<TAB>' : ddc#map#manual_complete()
inoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
inoremap <C-n>   <Cmd>call pum#map#select_relative(+1)<CR>
inoremap <C-p>   <Cmd>call pum#map#select_relative(-1)<CR>
inoremap <C-o>   <Cmd>call pum#map#confirm()<CR>
inoremap <expr> <C-l>   ddc#map#extend(pum#map#confirm())
inoremap <expr> <C-x><C-f> ddc#map#manual_complete('path')
inoremap <expr> l
      \ pum#entered() ?
      \ '<Cmd>call pum#map#insert_relative(+1)<CR>' : 'l'
inoremap <expr> h
      \ pum#entered() ?
      \ '<Cmd>call pum#map#insert_relative(-1)<CR>' : 'h'
inoremap <expr> <C-e>
      \ ddc#map#insert_item(0, '<Cmd>call pum#map#cancel()<CR>')
inoremap <C-y>   <Cmd>call pum#map#confirm()<CR>

" For command line mode completion
cnoremap <expr> <Tab>
      \ pum#visible() ? '<Cmd>call pum#map#insert_relative(+1)<CR>' :
      \ exists('b:ddc_cmdline_completion') ?
      \ ddc#map#manual_complete() : nr2char(&wildcharm)
cnoremap <S-Tab> <Cmd>call pum#map#insert_relative(-1)<CR>
cnoremap <C-o>   <Cmd>call pum#map#confirm()<CR>
cnoremap <expr> <C-e>
      \ ddc#map#insert_item(0, '<Cmd>call pum#map#cancel()<CR>')

call ddc#enable()
'''
hook_add = '''
nnoremap ;       <Cmd>call CommandlinePre(':')<CR>:
nnoremap /       <Cmd>call CommandlinePre('/')<CR>/
nnoremap ?       <Cmd>call CommandlinePre('/')<CR>?
function! CommandlinePre(mode) abort
  " NOTE: It disables default command line completion!
  set wildchar=<C-t>
  set wildcharm=<C-t>
  cnoremap <expr><buffer> <Tab>
        \ pum#visible() ?
        \  '<Cmd>call pum#map#insert_relative(+1)<CR>' :
        \ exists('b:ddc_cmdline_completion') ?
        \   ddc#map#manual_complete() : "\<C-t>"
  " Overwrite sources
  if !exists('b:prev_buffer_config')
    let b:prev_buffer_config = ddc#custom#get_buffer()
  endif
  if a:mode ==# ':'
    call ddc#custom#patch_buffer('keywordPattern', '[0-9a-zA-Z_:#-]*')
  endif
  autocmd vimrc User DDCCmdlineLeave ++once call CommandlinePost()
  autocmd vimrc InsertEnter <buffer> ++once call CommandlinePost()
  call ddc#enable_cmdline_completion()
endfunction
function! CommandlinePost() abort
  silent! cunmap <buffer> <Tab>
  " Restore sources
  if exists('b:prev_buffer_config')
    call ddc#custom#set_buffer(b:prev_buffer_config)
    unlet b:prev_buffer_config
  else
    call ddc#custom#set_buffer({})
  endif
  set wildcharm=<Tab>
endfunction
'''

[[plugins]]
repo = 'Shougo/pum.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-native'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-ui-pum'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-around'
on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-matcher_head'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-sorter_rank'
#on_source = 'ddc.vim'

#[[plugins]]
#repo = 'Shougo/ddc-converter_remove_overlap'
#on_source = 'ddc.vim'

[[plugins]]
repo = 'matsui54/ddc-buffer'
on_source = 'ddc.vim'

[[plugins]]
repo = 'shun/ddc-vim-lsp'
on_source = 'ddc.vim'

[[plugins]]
repo = 'Shougo/ddc-source-cmdline'
on_source = 'ddc.vim'

[[plugins]]
repo = 'tani/ddc-fuzzy'
on_source = 'ddc.vim'
