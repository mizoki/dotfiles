[[plugins]]
repo = 'Shougo/ddu.vim'
depends = ['denops.vim']
hook_add = '''
call ddu#custom#patch_global({
    \   'ui': 'ff',
    \   'sources': [
    \     {
    \       'name': 'file_rec',
    \       'params': {
    \         'ignoredDirectories': ['.git', 'node_modules', 'vendor', '.next']
    \       }
    \     }
    \   ],
    \   'sourceOptions': {
    \     '_': {
    \       'matchers': ['matcher_substring'],
    \     },
    \   },
    \   'filterParams': {
    \     'matcher_substring': {
    \       'highlightMatched': 'Title',
    \     },
    \   },
    \   'kindOptions': {
    \     'file': {
    \       'defaultAction': 'open',
    \     },
    \   },
    \   'uiParams': {
    \     'ff': {
    \       'startFilter': v:true,
    \       'prompt': '> ',
    \     }
    \   },
    \ })

autocmd FileType ddu-ff call s:ddu_my_settings()
function! s:ddu_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open'})<CR>

  nnoremap <buffer><silent> s
        \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>

  nnoremap <buffer><silent> v
        \ <Cmd>call ddu#ui#ff#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>

  nnoremap <buffer><silent> a
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  nnoremap <buffer><silent> i
        \ <Cmd>call ddu#ui#ff#do_action('openFilterWindow')<CR>

  nnoremap <buffer><silent> p
        \ <Cmd>call ddu#ui#ff#do_action('preview')<CR>

  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>

  nnoremap <buffer><silent> <Esc>
        \ <Cmd>call ddu#ui#ff#do_action('quit')<CR>

  if b:ddu_ui_name ==# 'buffer'
    nnoremap <buffer><silent> d
          \ <Cmd>execute 'bdelete' str2nr(getline(line('.'))[:3], 10)<CR>
          \ <Cmd>call ddu#ui#ff#do_action('refreshItems')<CR>
  endif
endfunction

autocmd FileType ddu-ff-filter call s:ddu_filter_my_settings()
function! s:ddu_filter_my_settings() abort
  inoremap <buffer><silent> <CR>
        \ <Esc><Cmd>call ddu#ui#ff#close()<CR>

  inoremap <buffer><silent> <Esc>
        \ <Esc><Cmd>call ddu#ui#ff#close()<CR>

  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#ff#close()<CR>

  nnoremap <buffer><silent> <Esc>
        \ <Cmd>call ddu#ui#ff#close()<CR>
endfunction

nnoremap [ddu] <Nop>
nmap <space>u [ddu]
nmap [ddu]f <Cmd>call ddu#start({})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-ff'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-source-file_rec'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_substring'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-filter-matcher_hidden'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-kind-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'shun/ddu-source-buffer'
on_source = 'ddu.vim'
hook_add = '''
call ddu#custom#patch_local('buffer', {
    \   'uiParams': {
    \     'ff': {
    \       'startFilter': v:false,
    \     }
    \   },
    \ })

nmap [ddu]b <Cmd>call ddu#start({'name': 'buffer', 'sources': [{'name': 'buffer'}]})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-file_old'
on_source = 'ddu.vim'
hook_add = '''
call ddu#custom#patch_local('file_old', {
    \   'uiParams': {
    \     'ff': {
    \       'startFilter': v:false,
    \     }
    \   },
    \ })

nmap [ddu]o <Cmd>call ddu#start({'name': 'file_old', 'sources': [{'name': 'file_old'}]})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-ui-filer'
on_source = 'ddu.vim'
hook_add = '''
call ddu#custom#patch_local('filer', {
      \   'ui': 'filer',
      \   'sources': [{'name': 'file', 'params': {}}],
      \   'sourceOptions': {
      \     '_': {
      \       'columns': ['filename'],
      \       'matchers': [],
      \     },
      \   },
      \   'kindOptions': {
      \     'file': {
      \       'defaultAction': 'open',
      \     },
      \   },
      \   'uiParams' : {
      \     'filer': {
      \       'split': 'vertical',
      \       'splitDirection': 'topleft',
      \       'winWidth': 30,
      \     },
      \   },
      \ })

autocmd FileType ddu-filer call s:ddu_filer_my_settings()
function! s:ddu_filer_my_settings() abort
  nnoremap <buffer><silent> <CR>
        \ <Cmd>call ddu#ui#filer#do_action('itemAction')<CR>
  nnoremap <buffer><silent> S
        \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'split'}})<CR>
  nnoremap <buffer><silent> V
        \ <Cmd>call ddu#ui#filer#do_action('itemAction', {'name': 'open', 'params': {'command': 'vsplit'}})<CR>
  nnoremap <buffer><silent> <Space>
        \ <Cmd>call ddu#ui#filer#do_action('toggleSelectItem')<CR>
  nnoremap <buffer> o
        \ <Cmd>call ddu#ui#filer#do_action('expandItem', {'mode': 'toggle'})<CR>
  nnoremap <buffer><silent> q
        \ <Cmd>call ddu#ui#filer#do_action('quit')<CR>
  nnoremap <buffer> .
        \ <Cmd>call ddu#ui#filer#do_action('updateOptions', {
        \   'sourceOptions': {
        \     '_': {
        \       'matchers': ToggleHidden(),
        \     },
        \   },
        \ })<CR>
endfunction

function! ToggleHidden()
  let current = ddu#custom#get_current(b:ddu_ui_name)
  let source_options = get(current, 'sourceOptions', {})
  let source_options_all = get(source_options, '_', {})
  let matchers = get(source_options_all, 'matchers', [])
  return empty(matchers) ? ['matcher_hidden'] : []
endfunction

nmap [ddu]e <Cmd>call ddu#start({'name': 'filer', 'sourceOptions': {'file': {'path': expand("%:p:h"),}}})<CR>
'''

[[plugins]]
repo = 'Shougo/ddu-source-file'
on_source = 'ddu.vim'

[[plugins]]
repo = 'Shougo/ddu-column-filename'
on_source = 'ddu.vim'
